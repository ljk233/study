{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction Preamble goes here","title":"Introduction"},{"location":"#introduction","text":"Preamble goes here","title":"Introduction"},{"location":"M248/","text":"Introduction The purpose of this note is to provide a list of references for my study of M248: Analysing data . There would be little utility is reproducing the notes, given that the Open University already provides a fantastic source of notes in the Handbook and the study text. The example links direct to a computer activity completed in Python . They provide little use to the study of M248 (given that the module uses Minitab ), and is so mainly for interest and colour. They were written using Atom + Hydrogen , as I found Jupyter notebook irritating to version control in GitHub. They could also be used with some other IDE, such as Spyder.","title":"Introduction"},{"location":"M248/#introduction","text":"The purpose of this note is to provide a list of references for my study of M248: Analysing data . There would be little utility is reproducing the notes, given that the Open University already provides a fantastic source of notes in the Handbook and the study text. The example links direct to a computer activity completed in Python . They provide little use to the study of M248 (given that the module uses Minitab ), and is so mainly for interest and colour. They were written using Atom + Hydrogen , as I found Jupyter notebook irritating to version control in GitHub. They could also be used with some other IDE, such as Spyder.","title":"Introduction"},{"location":"M248/01_references/","text":"References Add preamble Data Summarising data Sample mean HB p6 U1.4.1 CA3 Sample median HB p6 U1.4.1 CA3 Sample quartiles HB p6 U1.4.2 CA3 Sample IQR HB p6 U1.4.3 CA3 Sample standard deviation HB p6 U1.4.3 CA3 Visualising data Bar charts HB p5 U1.3.1 CA1.2 Frequency histograms HB p5 U1.3.2 CA2.1 Boxplots HB p5 U1.3.3 CA2.2 Side-by-side bar charts HB p5 U1.5.1 CA4.1 Unit-area histograms HB p5 U1.5.2 CA4.2 Comparative boxplots HB p5 U1.5.3 CA4.3 Scatterplots HB p6 U1.5.4 CA4.4 Probability Discrete random variables Definition of discrete random variables HB p7 U2.2.1 Probability mass functions HB p7 U2.2.2 Checking the validity of a p.m.f. HB p7 U2.2.2 Cumulative distribution function of a discrete rvs HB p7 U2.4.2 Mean of discrete rvs HB p9 U4.1.1 Variance of discrete rvs HB p9 U4.3.1 Population quantiles of discrete rvs (inverse c.d.f.) HB p11 U5.4.2 Continuous random variables Definition of a continuous rvs HB p7 U2.2.1 Probability density functions HB p7 U2.2.3. and U2.3.2 Checking the validity of a p.d.f. HB p7 U2.3.3 Cumulative distribution function of a continuous rvs HB p7 U2.4.3 Mean of a continuous rvs HB p9 U4.2 Variance of a continuous rvs HB p9 U4.4 Population quantiles of continuous rvs (inverse c.d.f.) HB p11 U5.4.1 Standard probability models See HB p26 for table of formulas for the standard distributions. Bernoulli distribution About: HB p7 U3.1.1 Mean and variance: U4.1.2. and U4.3.2 Binomial distribution About: HB p8 U3.2.1 Mean and variance : U4.1.2. and U4.3.2 Continuous uniform distribution About: HB p8 U3.5.2 Discrete uniform distribution About: HB p8 U3.5.1 Mean and variance : U4.1.2. and U4.3.2 Exponential distribution HB p10 U5.2.1 Geometric distribution About: HB p8 U3.3.1 Mean and variance: U4.1.2. and U4.3.2 Poisson distribution About: HB p8 U3.4 Mean and variance: U4.1.2. and U4.3.2 Standard uniform distribution HB p8 U3.5.2 Linear transformations of random variables Linear transformations of random variables HB p9 U4.5 Modelling events occurring at random over time Poisson's approximation of rare events HB p10 U5.1 Bernoulli process HB p10 U5.2.1 Poisson process HB p10 U5.3 CA10 Confirming the Poisson process is a good model HB p10 U5.3.2 CA10 Normal distributions About the family of normal distribution HB pp.11 U6 Standard normal distribution HB pp.12 U6 Linear transformations of normal variables HB pp.11 U6 Transforming any normal distribution into the standard normal distribution HB pp.12 U6 Probabilities involving normal distributions HB pp.12 U6 Quantiles of normal distributions HB pp.12 U6 Normal probability plots HB pp.12 U6 Central limit theorem Statement of the central limit theorem (HB pp.12) Sampling distribution of the mean (HB pp.13) Distribution of the sample total (HB pp.13) Estimation Point estimation Interval estimation Hypothesis testing","title":"References"},{"location":"M248/01_references/#references","text":"Add preamble","title":"References"},{"location":"M248/01_references/#data","text":"","title":"Data"},{"location":"M248/01_references/#probability","text":"","title":"Probability"},{"location":"M248/01_references/#modelling-events-occurring-at-random-over-time","text":"Poisson's approximation of rare events HB p10 U5.1 Bernoulli process HB p10 U5.2.1 Poisson process HB p10 U5.3 CA10 Confirming the Poisson process is a good model HB p10 U5.3.2 CA10","title":"Modelling events occurring at random over time"},{"location":"M248/01_references/#normal-distributions","text":"About the family of normal distribution HB pp.11 U6 Standard normal distribution HB pp.12 U6 Linear transformations of normal variables HB pp.11 U6 Transforming any normal distribution into the standard normal distribution HB pp.12 U6 Probabilities involving normal distributions HB pp.12 U6 Quantiles of normal distributions HB pp.12 U6 Normal probability plots HB pp.12 U6","title":"Normal distributions"},{"location":"M248/01_references/#central-limit-theorem","text":"Statement of the central limit theorem (HB pp.12) Sampling distribution of the mean (HB pp.13) Distribution of the sample total (HB pp.13)","title":"Central limit theorem"},{"location":"M248/01_references/#estimation","text":"","title":"Estimation"},{"location":"M248/01_references/#hypothesis-testing","text":"","title":"Hypothesis testing"},{"location":"M248/Workflows/01_probability/","text":"Probability Using contingency tables To be added.","title":"Probability"},{"location":"M248/Workflows/01_probability/#probability","text":"","title":"Probability"},{"location":"M248/Workflows/01_probability/#using-contingency-tables","text":"To be added.","title":"Using contingency tables"},{"location":"M248/Workflows/02_probability_distributions/","text":"Probability Distributions Checking the validity of a probability distribution We are given some probability distribution (either a p.m.f. or a p.d.f.), and we are asked to confirm it is valid. Check if the properties of a p.m.f. or p.d.f. hold true. Validity of a probability mass function \\(\\sum_x p(x) = 1\\) \\(p(x) \\in (0,1]\\) Validity of a probability density function \\(\\int f(x) = 1\\) , over the range of \\(X\\) \\(f(x) \\in (0,1)\\) Normalising constants Calculating a normalising constant We are given a p.d.f. \\(f(x)\\) , and asked to calculate the normalising constant \\(\\dfrac{1}{k}\\) so the p.d.f. is valid. Solve \\(k = \\int_{a}^{b} f(x) \\> dx\\) Confirming the use of a normalising constant We are given some p.d.f. \\(\\frac{1}{k} f(x)\\) , and asked to confirm the validity. See Checking the validity of a probability distribution > Continuous. Using standard probability models We are given a scenario, and asked to calculate the probability of some event. Identify the distribution, if it is not given in the question. Map the parameters. Parse the probability. Translate it into a form involving either \\(p(x)\\) or \\(F(x)\\) . Solve the equation(s). Note, do not forget to state any approximation in the final statement. Expected value and variance We are asked to calculate the expected value or variance of some probability distribution by hand. Note, to find the the standard deviation \\(S(X)\\) , take the square root of \\(V(X)\\) . Discrete random variables Construct a table with columns \\(X\\) and \\(p(x)\\) . For the expected value, recall \\(E(X) = \\sum_{x} x \\> p(x)\\) . Add a column to hold \\(x \\> p(x)\\) for each element of \\(X\\) . Sum the values. For the variance, recall \\(V(X) = E(X^{2}) - E(X)^{2}\\) . Add a column to hold \\(x^{2} p(x)\\) for each element of \\(X\\) . Sum the values of \\(x^{2} p(x)\\) . This gives \\(E(X^{2})\\) . Calculate \\(E(X)\\) . See above. Calculate \\(E(X^{2}) - E(X)^{2}\\) . Continuous random variables For the expected value, recall \\(E(X) = \\int_{a}^{b} x \\> f(x)\\) . Integrate \\(\\int_{a}^{b} x \\> f(x)\\) , where \\(a, b\\) are the boundaries of \\(X\\) . For the variance, recall \\(V(X) = E(X^{2}) - E(X)^{2}\\) . Integrate \\(\\int_{a}^{b} x^{2} \\> f(x)\\) , where \\(a, b\\) are the boundaries of \\(X\\) . This gives \\(E(X^{2})\\) . Calculate \\(E(X)\\) . See above. Calculate \\(E(X^{2}) - E(X)^{2}\\) . Linear transformations We are given a random variable \\(Y\\) expressed as a linear transformation of some other random variable \\(X\\) , such that \\(Y = aX + b\\) , and \\(a, b\\) are known constants. Solve the equation. \\(E(Y) = aE(X) + b\\) \\(V(Y) = a^{2} V(X)\\) . \\(S(Y) = \\sqrt{a^{2} E(X)} = |a| \\sqrt{V(X)} = |a| S(X)\\) . Population quantiles We are given a probability distribution, and asked to calculate some \\(\\alpha-\\) quantile of the distribution. Discrete random variables To add. Continuous random variables Find the c.d.f. (if it is not given in the question) Convert the quantile to \\(\\alpha \\in (0,1)\\) , if it is given as a percentage or description (e.g., sample lower quartile, \\(q_{L}\\) , or 25% are all equivalent to \\(\\alpha = 0.25\\) ). Solve \\(q_{\\alpha} = F^{-1}(\\alpha)\\) by rearranging \\(F(q_{\\alpha}) = \\alpha\\)","title":"Probability Distributions"},{"location":"M248/Workflows/02_probability_distributions/#probability-distributions","text":"","title":"Probability Distributions"},{"location":"M248/Workflows/02_probability_distributions/#checking-the-validity-of-a-probability-distribution","text":"We are given some probability distribution (either a p.m.f. or a p.d.f.), and we are asked to confirm it is valid. Check if the properties of a p.m.f. or p.d.f. hold true.","title":"Checking the validity of a probability distribution"},{"location":"M248/Workflows/02_probability_distributions/#normalising-constants","text":"","title":"Normalising constants"},{"location":"M248/Workflows/02_probability_distributions/#using-standard-probability-models","text":"We are given a scenario, and asked to calculate the probability of some event. Identify the distribution, if it is not given in the question. Map the parameters. Parse the probability. Translate it into a form involving either \\(p(x)\\) or \\(F(x)\\) . Solve the equation(s). Note, do not forget to state any approximation in the final statement.","title":"Using standard probability models"},{"location":"M248/Workflows/02_probability_distributions/#expected-value-and-variance","text":"We are asked to calculate the expected value or variance of some probability distribution by hand. Note, to find the the standard deviation \\(S(X)\\) , take the square root of \\(V(X)\\) .","title":"Expected value and variance"},{"location":"M248/Workflows/02_probability_distributions/#linear-transformations","text":"We are given a random variable \\(Y\\) expressed as a linear transformation of some other random variable \\(X\\) , such that \\(Y = aX + b\\) , and \\(a, b\\) are known constants. Solve the equation. \\(E(Y) = aE(X) + b\\) \\(V(Y) = a^{2} V(X)\\) . \\(S(Y) = \\sqrt{a^{2} E(X)} = |a| \\sqrt{V(X)} = |a| S(X)\\) .","title":"Linear transformations"},{"location":"M248/Workflows/02_probability_distributions/#population-quantiles","text":"We are given a probability distribution, and asked to calculate some \\(\\alpha-\\) quantile of the distribution.","title":"Population quantiles"},{"location":"M248/Workflows/03_poisson_process/","text":"The Poisson Process Using the Poisson process We are given some process that occurs in real time with a rate \\(\\lambda\\) , and asked to identify the probability of some event occurring within some time interval. Number of events Formalise the rate. Pay attention to the unit of time. Determine the rate in question. Is the time interval in the question the same as that of that for the rate given in (1)? If it is not, then use \\(\\lambda t\\) , where \\(t\\) is the conversion factor between the units of time. Parse the probability. Express it in terms involving either \\(p(x)\\) or \\(F(x)\\) , using \\(X \\sim \\text{Poisson}(\\lambda t)\\) . Solve the equation. Waiting time between events Formalise the rate. Pay attention to the unit of time. Parse the probability. Express it in terms involving \\(F(t)\\) , using \\(T \\sim M(\\lambda)\\) (do not use \\(\\lambda t\\) ). Solve. Confirming the Poisson process is a good model We are presented with some data, and asked to confirm if the data conforms to the Poisson process Perform the following visual checks: Rate of occurrence is linear. Plot a scatterplot of Events against Time. Number of events \\(\\to\\) Poisson distribution. Plot a bar chart of Number of Events per Time Interval (same time interval as rate). Waiting time between events \\(\\to\\) exponential distribution. Plot a frequency histogram of Waiting Times. Also check that for the: Number of events : \\(E(X) = V(X)\\) Waiting time between events : \\(E(T) = S(T)\\) These are from the properties of the distribution (see HB p.26 )","title":"The Poisson Process"},{"location":"M248/Workflows/03_poisson_process/#the-poisson-process","text":"","title":"The Poisson Process"},{"location":"M248/Workflows/03_poisson_process/#using-the-poisson-process","text":"We are given some process that occurs in real time with a rate \\(\\lambda\\) , and asked to identify the probability of some event occurring within some time interval.","title":"Using the Poisson process"},{"location":"M248/Workflows/03_poisson_process/#confirming-the-poisson-process-is-a-good-model","text":"We are presented with some data, and asked to confirm if the data conforms to the Poisson process Perform the following visual checks: Rate of occurrence is linear. Plot a scatterplot of Events against Time. Number of events \\(\\to\\) Poisson distribution. Plot a bar chart of Number of Events per Time Interval (same time interval as rate). Waiting time between events \\(\\to\\) exponential distribution. Plot a frequency histogram of Waiting Times. Also check that for the: Number of events : \\(E(X) = V(X)\\) Waiting time between events : \\(E(T) = S(T)\\) These are from the properties of the distribution (see HB p.26 )","title":"Confirming the Poisson process is a good model"},{"location":"M250/","text":"Introduction","title":"Introduction"},{"location":"M250/#introduction","text":"","title":"Introduction"},{"location":"M250/references/","text":"References I'm not sure if this is needed.","title":"References"},{"location":"M250/references/#references","text":"I'm not sure if this is needed.","title":"References"},{"location":"M250/Syntax/01_anatomy_class/","text":"Anatomy of a Class This is a brief overview of the syntax of the various features of a concrete class in Java, using a skeleteon strcuture. (It contains only the headers.) Class header 1 2 3 4 5 6 7 8 9 10 11 /** * This is a docstring for Javadocs. */ public class SomeClass extends SuperClass implements AnInterface { // See Variables // See Constructors // See Methods } Class and instance variables 1 2 3 4 5 6 7 // Class variables private static String aClassVar = \"Some text\" ; // class variable private static final int aClassConst = 1 ; // class constant // Instance variables private OtherClass ref ; // reference instance variable private float prim ; // primitive instance variable Constructors 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 /** * Zero-argument defaults constructor. */ public SomeClass () { // Instantiate something } /** * Three-argument constructor. */ public SomeClass ( OtherClass anObj , float aFlt , int aNum ) { // Instantiate something } Methods Get methods 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 /** * Returns the instance value of ref. */ public OtherClass getRef () { return this . ref ; } /** * Returns the instance value of prim. */ public float getPrim () { return this . prim ; } Set methods 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 /** * Sets the instance value of ref to arg aRef. */ public OtherClass setRef ( OtherClass aRef ) { this . ref = aRef ; } /** * Sets the instance value of prim to arg aFlt. */ public float setPrim ( float aFlt ) { this . prim = aFlt ; }","title":"Anatomy of a Class"},{"location":"M250/Syntax/01_anatomy_class/#anatomy-of-a-class","text":"This is a brief overview of the syntax of the various features of a concrete class in Java, using a skeleteon strcuture. (It contains only the headers.)","title":"Anatomy of a Class"},{"location":"M250/Syntax/01_anatomy_class/#class-header","text":"1 2 3 4 5 6 7 8 9 10 11 /** * This is a docstring for Javadocs. */ public class SomeClass extends SuperClass implements AnInterface { // See Variables // See Constructors // See Methods }","title":"Class header"},{"location":"M250/Syntax/01_anatomy_class/#class-and-instance-variables","text":"1 2 3 4 5 6 7 // Class variables private static String aClassVar = \"Some text\" ; // class variable private static final int aClassConst = 1 ; // class constant // Instance variables private OtherClass ref ; // reference instance variable private float prim ; // primitive instance variable","title":"Class and instance variables"},{"location":"M250/Syntax/01_anatomy_class/#constructors","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 /** * Zero-argument defaults constructor. */ public SomeClass () { // Instantiate something } /** * Three-argument constructor. */ public SomeClass ( OtherClass anObj , float aFlt , int aNum ) { // Instantiate something }","title":"Constructors"},{"location":"M250/Syntax/01_anatomy_class/#methods","text":"","title":"Methods"},{"location":"M250/Syntax/02_selection_iteration/","text":"Selection and Iteration For loop Syntax for (iterator, condition, iterate iterator) 1 2 3 4 for ( int k = 0 ; k < x ; k ++ ) { // do something } For-each loop 1 // Book 3 If selection 1 2 3 4 5 6 7 8 9 10 11 12 if ( aVar < x ) { // if this, then do that } else if ( aVar < y ) { // else if this, then do that } else { // else do that } While loop Syntax while (condition) 1 2 3 4 5 6 while ( aVar > x ) { // do somethng // ensure the condition will // eventually become false }","title":"Selection and Iteration"},{"location":"M250/Syntax/02_selection_iteration/#selection-and-iteration","text":"","title":"Selection and Iteration"},{"location":"M250/Syntax/02_selection_iteration/#for-loop","text":"Syntax for (iterator, condition, iterate iterator) 1 2 3 4 for ( int k = 0 ; k < x ; k ++ ) { // do something }","title":"For loop"},{"location":"M250/Syntax/02_selection_iteration/#for-each-loop","text":"1 // Book 3","title":"For-each loop"},{"location":"M250/Syntax/02_selection_iteration/#if-selection","text":"1 2 3 4 5 6 7 8 9 10 11 12 if ( aVar < x ) { // if this, then do that } else if ( aVar < y ) { // else if this, then do that } else { // else do that }","title":"If selection"},{"location":"M250/Syntax/02_selection_iteration/#while-loop","text":"Syntax while (condition) 1 2 3 4 5 6 while ( aVar > x ) { // do somethng // ensure the condition will // eventually become false }","title":"While loop"},{"location":"M250/Theory/01_oop_principles/","text":"Principles in OOP Abstraction Encapsulation Reference: U4.7 Encapsulation is the parcelling up of information and behaviour into a reusable component. Objects allow the encapsulation of data by incorporating into a single entity (object) both the data (instance variables) and the behaviour (methods) defined for that data. It is implemented in Java by using defined classes that act as templates for the creation of objects, which encapsulate both the state and behaviour of the object through data hiding. Data hiding is the principle of only providing access to private instance variables through a limited set of public methods. Inheritance Polymorphism","title":"Principles in OOP"},{"location":"M250/Theory/01_oop_principles/#principles-in-oop","text":"","title":"Principles in OOP"},{"location":"M250/Theory/01_oop_principles/#abstraction","text":"","title":"Abstraction"},{"location":"M250/Theory/01_oop_principles/#encapsulation","text":"Reference: U4.7 Encapsulation is the parcelling up of information and behaviour into a reusable component. Objects allow the encapsulation of data by incorporating into a single entity (object) both the data (instance variables) and the behaviour (methods) defined for that data. It is implemented in Java by using defined classes that act as templates for the creation of objects, which encapsulate both the state and behaviour of the object through data hiding. Data hiding is the principle of only providing access to private instance variables through a limited set of public methods.","title":"Encapsulation"},{"location":"M250/Theory/01_oop_principles/#inheritance","text":"","title":"Inheritance"},{"location":"M250/Theory/01_oop_principles/#polymorphism","text":"","title":"Polymorphism"},{"location":"M250/Theory/02_classes_objects/","text":"Classes, Objects, and Attributes Objects A general description of an object and its relationship with its class. Attributes Attributes and instance variables It is common that there is one-to-one relationship between an attribute and some instance variable, but it is not neccessarily the case. Example A person has a first name and last name. These are attributes we could implement using two instance variables: fName and lname . But a person also has another attribute: full name, which we would not implement in this case, instead we would write a getter method getFullName that would return both the fName and lName instance variables. That way, if we wish to change how a person's full name is represented, we would only need to change the one method. Attributes and state Reference: U01, SAQ 2 Attributes describe the kind of information that can be determined about an object. The state of an object is the particular data held by all the attributes at a given time. Keywords Attribute Some property or characteristic of an object that can be accessed using a getter method. Attributes are generally implemented by instance variables. An object's attributes are defined by its class. Class A class is a blueprint for the creation of objects. They ensures that all its instances have the same instance variables and behave in response to messages in an identical manner. Instance variable A variable whose identifier and type is common to all the instances of a class, but whose value is specific to each instance. Each instance variable either contains a reference to an object or contains a value of some primitive type. State The values of the attributes of an object constitute its state. The state of an object can vary over time as the values of its attributes change.","title":"Classes, Objects, and Attributes"},{"location":"M250/Theory/02_classes_objects/#classes-objects-and-attributes","text":"","title":"Classes, Objects, and Attributes"},{"location":"M250/Theory/02_classes_objects/#objects","text":"A general description of an object and its relationship with its class.","title":"Objects"},{"location":"M250/Theory/02_classes_objects/#attributes","text":"","title":"Attributes"},{"location":"M250/Theory/02_classes_objects/#keywords","text":"Attribute Some property or characteristic of an object that can be accessed using a getter method. Attributes are generally implemented by instance variables. An object's attributes are defined by its class. Class A class is a blueprint for the creation of objects. They ensures that all its instances have the same instance variables and behave in response to messages in an identical manner. Instance variable A variable whose identifier and type is common to all the instances of a class, but whose value is specific to each instance. Each instance variable either contains a reference to an object or contains a value of some primitive type. State The values of the attributes of an object constitute its state. The state of an object can vary over time as the values of its attributes change.","title":"Keywords"},{"location":"M250/Theory/03_messages/","text":"Messages in Java A message is a request for an object to do something. The only way to make an object do something is to send it a message. The set of messages that an object can understand is set out in its protocol . The behaviour of an object is its response to the messages in its protocol. A message may: change the state of an object make an object do something without changing its state get back some useful information from an object cause an object to send a message to another object cause an object to send a message to itself Terminology Message answer A message answer is an object's reply to a message. Not all messages elicit a message-answer A method with specified return type of void will not return a message answer. Message expression A message-send that evaluates to some value, i.e. the message returns a message answer. We also say that it returns a value. Message name The name of a message, including the following parentheses, but excluding any arguments. Message-send The code that sends a message to an object. If a message requires no arguments, then the message-send is the same as the message name. Arguments Actual arguments An actual argument is a value used in a message that is copied to a formal argument for use inside the corresponding method. Actual arguments must be of a compatible type with their corresponding formal arguments. Formal arguments A typed identifier used in a method signature between parentheses to stand for a value (an actual argument) that is passed into the method body by a message. This is the argument used when implementing the method. Getter and setter messages It is common for the protocol of an object to include a pair of message that either return or set the value of an attribute. Getter message A message that returns as its message answer the value of one of the receiver\u2019s attributes. Setter message A message that sets the value of one of a receiver\u2019s attributes. Example If a method was implemented as follows 1 2 3 4 public void setName ( String aName ) { // do something } Then There would be no message answer, as the return type is void This is not a message expression, because the message returns no answer Its message name would be setName() A message send would be anOject.setName(\"Joe Bloggs\") The formal argument of the method would be aName . An actual argument could be \"Joe Bloggs\" .","title":"Messages in Java"},{"location":"M250/Theory/03_messages/#messages-in-java","text":"A message is a request for an object to do something. The only way to make an object do something is to send it a message. The set of messages that an object can understand is set out in its protocol . The behaviour of an object is its response to the messages in its protocol. A message may: change the state of an object make an object do something without changing its state get back some useful information from an object cause an object to send a message to another object cause an object to send a message to itself","title":"Messages in Java"},{"location":"M250/Theory/03_messages/#terminology","text":"Message answer A message answer is an object's reply to a message. Not all messages elicit a message-answer A method with specified return type of void will not return a message answer. Message expression A message-send that evaluates to some value, i.e. the message returns a message answer. We also say that it returns a value. Message name The name of a message, including the following parentheses, but excluding any arguments. Message-send The code that sends a message to an object. If a message requires no arguments, then the message-send is the same as the message name.","title":"Terminology"},{"location":"M250/Theory/03_messages/#arguments","text":"Actual arguments An actual argument is a value used in a message that is copied to a formal argument for use inside the corresponding method. Actual arguments must be of a compatible type with their corresponding formal arguments. Formal arguments A typed identifier used in a method signature between parentheses to stand for a value (an actual argument) that is passed into the method body by a message. This is the argument used when implementing the method.","title":"Arguments"},{"location":"M250/Theory/03_messages/#getter-and-setter-messages","text":"It is common for the protocol of an object to include a pair of message that either return or set the value of an attribute. Getter message A message that returns as its message answer the value of one of the receiver\u2019s attributes. Setter message A message that sets the value of one of a receiver\u2019s attributes.","title":"Getter and setter messages"},{"location":"M250/Theory/03_messages/#example","text":"If a method was implemented as follows 1 2 3 4 public void setName ( String aName ) { // do something } Then There would be no message answer, as the return type is void This is not a message expression, because the message returns no answer Its message name would be setName() A message send would be anOject.setName(\"Joe Bloggs\") The formal argument of the method would be aName . An actual argument could be \"Joe Bloggs\" .","title":"Example"},{"location":"M250/Theory/04_diagrams/","text":"Diagrams in Object-orientated programming Object diagram Sequence diagram Variable reference diagram","title":"Diagrams in Object-orientated programming"},{"location":"M250/Theory/04_diagrams/#diagrams-in-object-orientated-programming","text":"","title":"Diagrams in Object-orientated programming"},{"location":"M250/Theory/04_diagrams/#object-diagram","text":"","title":"Object diagram"},{"location":"M250/Theory/04_diagrams/#sequence-diagram","text":"","title":"Sequence diagram"},{"location":"M250/Theory/04_diagrams/#variable-reference-diagram","text":"","title":"Variable reference diagram"}]}