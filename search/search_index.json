{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction Preamble goes here","title":"Introduction"},{"location":"#introduction","text":"Preamble goes here","title":"Introduction"},{"location":"M248/","text":"Introduction The purpose of this note is to provide a list of references for my study of M248: Analysing data . There would be little utility is reproducing the notes, given that the Open University already provides a fantastic source of notes in the Handbook and the study text. The example links direct to a computer activity completed in Python . They provide little use to the study of M248 (given that the module uses Minitab ), and is so mainly for interest and colour. They were written using Atom + Hydrogen , as I found Jupyter notebook irritating to version control in GitHub. They could also be used with some other IDE, such as Spyder.","title":"Introduction"},{"location":"M248/#introduction","text":"The purpose of this note is to provide a list of references for my study of M248: Analysing data . There would be little utility is reproducing the notes, given that the Open University already provides a fantastic source of notes in the Handbook and the study text. The example links direct to a computer activity completed in Python . They provide little use to the study of M248 (given that the module uses Minitab ), and is so mainly for interest and colour. They were written using Atom + Hydrogen , as I found Jupyter notebook irritating to version control in GitHub. They could also be used with some other IDE, such as Spyder.","title":"Introduction"},{"location":"M248/01_references/","text":"References Add preamble Data Summarising data Sample mean HB p6 U1.4.1 CA3 Sample median HB p6 U1.4.1 CA3 Sample quartiles HB p6 U1.4.2 CA3 Sample IQR HB p6 U1.4.3 CA3 Sample standard deviation HB p6 U1.4.3 CA3 Visualising data Bar charts HB p5 U1.3.1 CA1.2 Frequency histograms HB p5 U1.3.2 CA2.1 Boxplots HB p5 U1.3.3 CA2.2 Side-by-side bar charts HB p5 U1.5.1 CA4.1 Unit-area histograms HB p5 U1.5.2 CA4.2 Comparative boxplots HB p5 U1.5.3 CA4.3 Scatterplots HB p6 U1.5.4 CA4.4 Probability Discrete random variables Definition of discrete random variables HB p7 U2.2.1 Probability mass functions HB p7 U2.2.2 Checking the validity of a p.m.f. HB p7 U2.2.2 Cumulative distribution function of a discrete rvs HB p7 U2.4.2 Mean of discrete rvs HB p9 U4.1.1 Variance of discrete rvs HB p9 U4.3.1 Population quantiles of discrete rvs (inverse c.d.f.) HB p11 U5.4.2 Continuous random variables Definition of a continuous rvs HB p7 U2.2.1 Probability density functions HB p7 U2.2.3. and U2.3.2 Checking the validity of a p.d.f. HB p7 U2.3.3 Cumulative distribution function of a continuous rvs HB p7 U2.4.3 Mean of a continuous rvs HB p9 U4.2 Variance of a continuous rvs HB p9 U4.4 Population quantiles of continuous rvs (inverse c.d.f.) HB p11 U5.4.1 Standard probability models See HB p26 for table of formulas for the standard distributions. Bernoulli distribution About: HB p7 U3.1.1 Mean and variance: U4.1.2. and U4.3.2 Binomial distribution About: HB p8 U3.2.1 Mean and variance : U4.1.2. and U4.3.2 Continuous uniform distribution About: HB p8 U3.5.2 Discrete uniform distribution About: HB p8 U3.5.1 Mean and variance : U4.1.2. and U4.3.2 Exponential distribution HB p10 U5.2.1 Geometric distribution About: HB p8 U3.3.1 Mean and variance: U4.1.2. and U4.3.2 Poisson distribution About: HB p8 U3.4 Mean and variance: U4.1.2. and U4.3.2 Standard uniform distribution HB p8 U3.5.2 Linear transformations of random variables Linear transformations of random variables HB p9 U4.5 Modelling events occurring at random over time Poisson's approximation of rare events HB p10 U5.1 Bernoulli process HB p10 U5.2.1 Poisson process HB p10 U5.3 CA10 Confirming the Poisson process is a good model HB p10 U5.3.2 CA10 Normal distributions About the family of normal distribution HB pp.11 U6 Standard normal distribution HB pp.12 U6 Linear transformations of normal variables HB pp.11 U6 Transforming any normal distribution into the standard normal distribution HB pp.12 U6 Probabilities involving normal distributions HB pp.12 U6 Quantiles of normal distributions HB pp.12 U6 Normal probability plots HB pp.12 U6 Central limit theorem Statement of the central limit theorem (HB pp.12) Sampling distribution of the mean (HB pp.13) Distribution of the sample total (HB pp.13) Estimation Point estimation Interval estimation Hypothesis testing","title":"References"},{"location":"M248/01_references/#references","text":"Add preamble","title":"References"},{"location":"M248/01_references/#data","text":"","title":"Data"},{"location":"M248/01_references/#summarising-data","text":"Sample mean HB p6 U1.4.1 CA3 Sample median HB p6 U1.4.1 CA3 Sample quartiles HB p6 U1.4.2 CA3 Sample IQR HB p6 U1.4.3 CA3 Sample standard deviation HB p6 U1.4.3 CA3","title":"Summarising data"},{"location":"M248/01_references/#visualising-data","text":"Bar charts HB p5 U1.3.1 CA1.2 Frequency histograms HB p5 U1.3.2 CA2.1 Boxplots HB p5 U1.3.3 CA2.2 Side-by-side bar charts HB p5 U1.5.1 CA4.1 Unit-area histograms HB p5 U1.5.2 CA4.2 Comparative boxplots HB p5 U1.5.3 CA4.3 Scatterplots HB p6 U1.5.4 CA4.4","title":"Visualising data"},{"location":"M248/01_references/#probability","text":"","title":"Probability"},{"location":"M248/01_references/#discrete-random-variables","text":"Definition of discrete random variables HB p7 U2.2.1 Probability mass functions HB p7 U2.2.2 Checking the validity of a p.m.f. HB p7 U2.2.2 Cumulative distribution function of a discrete rvs HB p7 U2.4.2 Mean of discrete rvs HB p9 U4.1.1 Variance of discrete rvs HB p9 U4.3.1 Population quantiles of discrete rvs (inverse c.d.f.) HB p11 U5.4.2","title":"Discrete random variables"},{"location":"M248/01_references/#continuous-random-variables","text":"Definition of a continuous rvs HB p7 U2.2.1 Probability density functions HB p7 U2.2.3. and U2.3.2 Checking the validity of a p.d.f. HB p7 U2.3.3 Cumulative distribution function of a continuous rvs HB p7 U2.4.3 Mean of a continuous rvs HB p9 U4.2 Variance of a continuous rvs HB p9 U4.4 Population quantiles of continuous rvs (inverse c.d.f.) HB p11 U5.4.1","title":"Continuous random variables"},{"location":"M248/01_references/#standard-probability-models","text":"See HB p26 for table of formulas for the standard distributions. Bernoulli distribution About: HB p7 U3.1.1 Mean and variance: U4.1.2. and U4.3.2 Binomial distribution About: HB p8 U3.2.1 Mean and variance : U4.1.2. and U4.3.2 Continuous uniform distribution About: HB p8 U3.5.2 Discrete uniform distribution About: HB p8 U3.5.1 Mean and variance : U4.1.2. and U4.3.2 Exponential distribution HB p10 U5.2.1 Geometric distribution About: HB p8 U3.3.1 Mean and variance: U4.1.2. and U4.3.2 Poisson distribution About: HB p8 U3.4 Mean and variance: U4.1.2. and U4.3.2 Standard uniform distribution HB p8 U3.5.2","title":"Standard probability models"},{"location":"M248/01_references/#linear-transformations-of-random-variables","text":"Linear transformations of random variables HB p9 U4.5","title":"Linear transformations of random variables"},{"location":"M248/01_references/#modelling-events-occurring-at-random-over-time","text":"Poisson's approximation of rare events HB p10 U5.1 Bernoulli process HB p10 U5.2.1 Poisson process HB p10 U5.3 CA10 Confirming the Poisson process is a good model HB p10 U5.3.2 CA10","title":"Modelling events occurring at random over time"},{"location":"M248/01_references/#normal-distributions","text":"About the family of normal distribution HB pp.11 U6 Standard normal distribution HB pp.12 U6 Linear transformations of normal variables HB pp.11 U6 Transforming any normal distribution into the standard normal distribution HB pp.12 U6 Probabilities involving normal distributions HB pp.12 U6 Quantiles of normal distributions HB pp.12 U6 Normal probability plots HB pp.12 U6","title":"Normal distributions"},{"location":"M248/01_references/#central-limit-theorem","text":"Statement of the central limit theorem (HB pp.12) Sampling distribution of the mean (HB pp.13) Distribution of the sample total (HB pp.13)","title":"Central limit theorem"},{"location":"M248/01_references/#estimation","text":"","title":"Estimation"},{"location":"M248/01_references/#point-estimation","text":"","title":"Point estimation"},{"location":"M248/01_references/#interval-estimation","text":"","title":"Interval estimation"},{"location":"M248/01_references/#hypothesis-testing","text":"","title":"Hypothesis testing"},{"location":"M248/Workflows/01_probability/","text":"Contingency Tables To be added.","title":"Contingency Tables"},{"location":"M248/Workflows/01_probability/#contingency-tables","text":"To be added.","title":"Contingency Tables"},{"location":"M248/Workflows/02_probability_distributions/","text":"Probability Distributions Checking the validity of a probability distribution We are given some probability distribution (either a p.m.f. or a p.d.f.), and we are asked to confirm it is valid. Workflow: Check if the properties of a p.m.f. or p.d.f. hold true. Discrete \\(\\sum_x p(x) = 1\\) \\(p(x) \\in (0,1]\\) Continuous \\(\\int f(x) = 1\\) , over the range of \\(x\\) \\(f(x) \\in (0,1)\\) Calculating a normalising constant We are given a p.d.f. \\(f(x)\\) , and asked to calculate the normalising constant \\(k\\) so the p.d.f. is valid. Workflow: Solve \\(k = \\int_{a}^{b} f(x) \\> dx\\) Rationale: We know by the definition of the c.d.f. that \\[ 1 = \\int_{a}^{b} f(x) \\> dx. \\] Therefore, if the p.d.f. is \\(\\frac{1}{k} f(x)\\) , then it must be that \\[ \\begin{aligned} 1 &= \\int_{a}^{b} \\frac{1}{k} f(x) \\> dx \\\\ &= \\frac{1}{k} \\int_{a}^{b} f(x) \\> dx \\\\ k &= \\int_{a}^{b} f(x) \\> dx. \\end{aligned} \\] Confirming the use of a normalising constant We are given some p.d.f. \\(\\frac{1}{k} f(x)\\) , and asked to confirm the validity. Workflow: See Checking the validity of a probability distribution > Continuous. Population quantiles We are given a robability distribution, and asked to calculate some \\(\\alpha-\\) quantile of the distribution. Discrete To add. Continuous Workflow: Find the c.d.f. (if it is not given in the question) Convert the quantile to \\(\\alpha \\in (0,1)\\) , if it is given as a percentage or description (e.g., lower sampler quartile) Solve \\(q_{\\alpha} = F^{-1}(\\alpha)\\) by rearranging \\(F(q_{\\alpha}) = \\alpha\\) Example. Find the lower quartile of the continuous rv \\(X\\) with p.d.f. \\[ f(x) = x^{2}, \\hspace{3mm} x \\in ( 0,\\sqrt[3]{3} ). \\] The c.d.f. of \\(X\\) is given by \\[ \\begin{aligned} F(x) = \\int_{0}^{x} y^{2} \\> dy &= \\bigg[ \\frac{1}{3} y^{3} \\bigg]_{0}^{x} \\\\ &= \\frac{1}{3} x^{3} - \\frac{1}{3} (0^{3}) \\\\ &= \\frac{1}{3} x^{3}. \\end{aligned} \\] Let \\(q_{\\alpha}\\) be the value of \\(X\\) that corresponds to the \\(\\alpha-\\) quantile of \\(X\\) . The lower quartile is the 0.25-quantile, so \\[ \\begin{aligned} F(q_{0.25}) &= 0.25 \\\\ \\frac{1}{3} q_{0.25}^{3} &= 0.25 \\\\ q_{0.25}^{3} &= 0.75 \\\\ q_{0.25} &= \\sqrt[3]{0.75} \\simeq 0.909. \\end{aligned} \\] Using Standard Probability Models We are given a scenario, and asked to calculate the probability of some event. Workflow: Identify the distribution. (If it is not given in the question.) Map the parameters. Parse the probability. 9Translate it into some form involving either \\(p(x), f(x)\\) , or \\(F(x)\\) . Solve the equation(s). Note, do not forget to state any approximation in the final statement.","title":"Probability Distributions"},{"location":"M248/Workflows/02_probability_distributions/#probability-distributions","text":"","title":"Probability Distributions"},{"location":"M248/Workflows/02_probability_distributions/#checking-the-validity-of-a-probability-distribution","text":"We are given some probability distribution (either a p.m.f. or a p.d.f.), and we are asked to confirm it is valid. Workflow: Check if the properties of a p.m.f. or p.d.f. hold true.","title":"Checking the validity of a probability distribution"},{"location":"M248/Workflows/02_probability_distributions/#discrete","text":"\\(\\sum_x p(x) = 1\\) \\(p(x) \\in (0,1]\\)","title":"Discrete"},{"location":"M248/Workflows/02_probability_distributions/#continuous","text":"\\(\\int f(x) = 1\\) , over the range of \\(x\\) \\(f(x) \\in (0,1)\\)","title":"Continuous"},{"location":"M248/Workflows/02_probability_distributions/#calculating-a-normalising-constant","text":"We are given a p.d.f. \\(f(x)\\) , and asked to calculate the normalising constant \\(k\\) so the p.d.f. is valid. Workflow: Solve \\(k = \\int_{a}^{b} f(x) \\> dx\\) Rationale: We know by the definition of the c.d.f. that \\[ 1 = \\int_{a}^{b} f(x) \\> dx. \\] Therefore, if the p.d.f. is \\(\\frac{1}{k} f(x)\\) , then it must be that \\[ \\begin{aligned} 1 &= \\int_{a}^{b} \\frac{1}{k} f(x) \\> dx \\\\ &= \\frac{1}{k} \\int_{a}^{b} f(x) \\> dx \\\\ k &= \\int_{a}^{b} f(x) \\> dx. \\end{aligned} \\]","title":"Calculating a normalising constant"},{"location":"M248/Workflows/02_probability_distributions/#confirming-the-use-of-a-normalising-constant","text":"We are given some p.d.f. \\(\\frac{1}{k} f(x)\\) , and asked to confirm the validity. Workflow: See Checking the validity of a probability distribution > Continuous.","title":"Confirming the use of a normalising constant"},{"location":"M248/Workflows/02_probability_distributions/#population-quantiles","text":"We are given a robability distribution, and asked to calculate some \\(\\alpha-\\) quantile of the distribution.","title":"Population quantiles"},{"location":"M248/Workflows/02_probability_distributions/#discrete_1","text":"To add.","title":"Discrete"},{"location":"M248/Workflows/02_probability_distributions/#continuous_1","text":"Workflow: Find the c.d.f. (if it is not given in the question) Convert the quantile to \\(\\alpha \\in (0,1)\\) , if it is given as a percentage or description (e.g., lower sampler quartile) Solve \\(q_{\\alpha} = F^{-1}(\\alpha)\\) by rearranging \\(F(q_{\\alpha}) = \\alpha\\) Example. Find the lower quartile of the continuous rv \\(X\\) with p.d.f. \\[ f(x) = x^{2}, \\hspace{3mm} x \\in ( 0,\\sqrt[3]{3} ). \\] The c.d.f. of \\(X\\) is given by \\[ \\begin{aligned} F(x) = \\int_{0}^{x} y^{2} \\> dy &= \\bigg[ \\frac{1}{3} y^{3} \\bigg]_{0}^{x} \\\\ &= \\frac{1}{3} x^{3} - \\frac{1}{3} (0^{3}) \\\\ &= \\frac{1}{3} x^{3}. \\end{aligned} \\] Let \\(q_{\\alpha}\\) be the value of \\(X\\) that corresponds to the \\(\\alpha-\\) quantile of \\(X\\) . The lower quartile is the 0.25-quantile, so \\[ \\begin{aligned} F(q_{0.25}) &= 0.25 \\\\ \\frac{1}{3} q_{0.25}^{3} &= 0.25 \\\\ q_{0.25}^{3} &= 0.75 \\\\ q_{0.25} &= \\sqrt[3]{0.75} \\simeq 0.909. \\end{aligned} \\]","title":"Continuous"},{"location":"M248/Workflows/02_probability_distributions/#using-standard-probability-models","text":"We are given a scenario, and asked to calculate the probability of some event. Workflow: Identify the distribution. (If it is not given in the question.) Map the parameters. Parse the probability. 9Translate it into some form involving either \\(p(x), f(x)\\) , or \\(F(x)\\) . Solve the equation(s). Note, do not forget to state any approximation in the final statement.","title":"Using Standard Probability Models"},{"location":"M248/Workflows/03_poisson_process/","text":"The Poisson Process Using the Poisson process We are given some process that occurs in real time with a rate \\(\\lambda\\) , and asked to identify the probability of some event occuring within some time interval. Number of events Workflow: Formalise the rate. Pay attention to the unit of time. Determine the rate in question. Is the time interval in the question the same as that of that for the rate given in (1)? If it is not, then use \\(\\lambda t\\) , where \\(t\\) is the conversion factor between the units of time. Parse the probability. Express it in terms involving either \\(p(x)\\) or \\(F(x)\\) , using Use \\(X \\sim \\text{Poisson}(\\lambda t)\\) . Solve the equation. Waiting time between events Workflow: Formalise the rate. Pay attention to the unit of time. Parse the probability. Express it in terms involving of \\(F(t)\\) . Use \\(T \\sim M(\\lambda)\\) (do not use \\(\\lambda t\\) ). Solve. Confirming the Poisson process is a good model Use case: We are presented with some data, and asked to confirm if the data conforms to the Poisson process Workflow: Perform the following visual checks: Rate of occurrence is linear. Plot a scatterplot of Events against Time. Number of events \\(\\to\\) Poisson distribution. Plot a bar chart of Number of Events per Time Interval (same time interval as rate). Waiting time between events \\(\\to\\) exponential distribution. Plot a frequency histogram of Waiting Times.","title":"The Poisson Process"},{"location":"M248/Workflows/03_poisson_process/#the-poisson-process","text":"","title":"The Poisson Process"},{"location":"M248/Workflows/03_poisson_process/#using-the-poisson-process","text":"We are given some process that occurs in real time with a rate \\(\\lambda\\) , and asked to identify the probability of some event occuring within some time interval.","title":"Using the Poisson process"},{"location":"M248/Workflows/03_poisson_process/#number-of-events","text":"Workflow: Formalise the rate. Pay attention to the unit of time. Determine the rate in question. Is the time interval in the question the same as that of that for the rate given in (1)? If it is not, then use \\(\\lambda t\\) , where \\(t\\) is the conversion factor between the units of time. Parse the probability. Express it in terms involving either \\(p(x)\\) or \\(F(x)\\) , using Use \\(X \\sim \\text{Poisson}(\\lambda t)\\) . Solve the equation.","title":"Number of events"},{"location":"M248/Workflows/03_poisson_process/#waiting-time-between-events","text":"Workflow: Formalise the rate. Pay attention to the unit of time. Parse the probability. Express it in terms involving of \\(F(t)\\) . Use \\(T \\sim M(\\lambda)\\) (do not use \\(\\lambda t\\) ). Solve.","title":"Waiting time between events"},{"location":"M248/Workflows/03_poisson_process/#confirming-the-poisson-process-is-a-good-model","text":"Use case: We are presented with some data, and asked to confirm if the data conforms to the Poisson process Workflow: Perform the following visual checks: Rate of occurrence is linear. Plot a scatterplot of Events against Time. Number of events \\(\\to\\) Poisson distribution. Plot a bar chart of Number of Events per Time Interval (same time interval as rate). Waiting time between events \\(\\to\\) exponential distribution. Plot a frequency histogram of Waiting Times.","title":"Confirming the Poisson process is a good model"},{"location":"M250/","text":"Introduction","title":"Introduction"},{"location":"M250/#introduction","text":"","title":"Introduction"},{"location":"M250/references/","text":"References I'm not sure if this is needed.","title":"References"},{"location":"M250/references/#references","text":"I'm not sure if this is needed.","title":"References"},{"location":"M250/Syntax/01_anatomy_class/","text":"Anatomy of a Class This is a brief overview of the syntax of the various features of a concrete class in Java, using a skeleteon strcuture. (It contains only the headers.) Class header 1 2 3 4 5 6 7 8 9 10 11 /** * This is a docstring for Javadocs. */ public class SomeClass extends SuperClass implements AnInterface { // See Variables // See Constructors // See Methods } Class and instance variables 1 2 3 4 5 6 7 // Class variables private static String aClassVar = \"Some text\" ; // class variable private static final int aClassConst = 1 ; // class constant // Instance variables private OtherClass ref ; // reference instance variable private float prim ; // primitive instance variable Constructors 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 /** * Zero-argument defaults constructor. */ public SomeClass () { // Instantiate something } /** * Three-argument constructor. */ public SomeClass ( OtherClass anObj , float aFlt , int aNum ) { // Instantiate something } Methods Get methods 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 /** * Returns the instance value of ref. */ public OtherClass getRef () { return this . ref ; } /** * Returns the instance value of prim. */ public float getPrim () { return this . prim ; } Set methods 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 /** * Sets the instance value of ref to arg aRef. */ public OtherClass setRef ( OtherClass aRef ) { this . ref = aRef ; } /** * Sets the instance value of prim to arg aFlt. */ public float setPrim ( float aFlt ) { this . prim = aFlt ; }","title":"Anatomy of a Class"},{"location":"M250/Syntax/01_anatomy_class/#anatomy-of-a-class","text":"This is a brief overview of the syntax of the various features of a concrete class in Java, using a skeleteon strcuture. (It contains only the headers.)","title":"Anatomy of a Class"},{"location":"M250/Syntax/01_anatomy_class/#class-header","text":"1 2 3 4 5 6 7 8 9 10 11 /** * This is a docstring for Javadocs. */ public class SomeClass extends SuperClass implements AnInterface { // See Variables // See Constructors // See Methods }","title":"Class header"},{"location":"M250/Syntax/01_anatomy_class/#class-and-instance-variables","text":"1 2 3 4 5 6 7 // Class variables private static String aClassVar = \"Some text\" ; // class variable private static final int aClassConst = 1 ; // class constant // Instance variables private OtherClass ref ; // reference instance variable private float prim ; // primitive instance variable","title":"Class and instance variables"},{"location":"M250/Syntax/01_anatomy_class/#constructors","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 /** * Zero-argument defaults constructor. */ public SomeClass () { // Instantiate something } /** * Three-argument constructor. */ public SomeClass ( OtherClass anObj , float aFlt , int aNum ) { // Instantiate something }","title":"Constructors"},{"location":"M250/Syntax/01_anatomy_class/#methods","text":"","title":"Methods"},{"location":"M250/Syntax/01_anatomy_class/#get-methods","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 /** * Returns the instance value of ref. */ public OtherClass getRef () { return this . ref ; } /** * Returns the instance value of prim. */ public float getPrim () { return this . prim ; }","title":"Get methods"},{"location":"M250/Syntax/01_anatomy_class/#set-methods","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 /** * Sets the instance value of ref to arg aRef. */ public OtherClass setRef ( OtherClass aRef ) { this . ref = aRef ; } /** * Sets the instance value of prim to arg aFlt. */ public float setPrim ( float aFlt ) { this . prim = aFlt ; }","title":"Set methods"},{"location":"M250/Syntax/02_selection_iteration/","text":"Selection and Iteration For General sysntax for (iterator, condition, iterate iterator) 1 2 3 4 for ( int k = 0 ; k < x ; k ++ ) { // do something } For-each 1 If-else if-else 1 2 3 4 5 6 7 8 9 10 11 12 if ( aVar < x ) { // if this, do that } else if ( aVar < y ) { // else if something else, do that } else { // else do something } While General sysntax while (condition) 1 2 3 4 5 6 while ( aVar > x ) { // do somethng // ensure the condition will // eventually become false }","title":"Selection and Iteration"},{"location":"M250/Syntax/02_selection_iteration/#selection-and-iteration","text":"","title":"Selection and Iteration"},{"location":"M250/Syntax/02_selection_iteration/#for","text":"General sysntax for (iterator, condition, iterate iterator) 1 2 3 4 for ( int k = 0 ; k < x ; k ++ ) { // do something }","title":"For"},{"location":"M250/Syntax/02_selection_iteration/#for-each","text":"1","title":"For-each"},{"location":"M250/Syntax/02_selection_iteration/#if-else-if-else","text":"1 2 3 4 5 6 7 8 9 10 11 12 if ( aVar < x ) { // if this, do that } else if ( aVar < y ) { // else if something else, do that } else { // else do something }","title":"If-else if-else"},{"location":"M250/Syntax/02_selection_iteration/#while","text":"General sysntax while (condition) 1 2 3 4 5 6 while ( aVar > x ) { // do somethng // ensure the condition will // eventually become false }","title":"While"},{"location":"M250/Theory/01_oop_principles/","text":"Principles in OOP Abstraction Encapsulation Inheritance Polymorphism","title":"Principles in OOP"},{"location":"M250/Theory/01_oop_principles/#principles-in-oop","text":"","title":"Principles in OOP"},{"location":"M250/Theory/01_oop_principles/#abstraction","text":"","title":"Abstraction"},{"location":"M250/Theory/01_oop_principles/#encapsulation","text":"","title":"Encapsulation"},{"location":"M250/Theory/01_oop_principles/#inheritance","text":"","title":"Inheritance"},{"location":"M250/Theory/01_oop_principles/#polymorphism","text":"","title":"Polymorphism"},{"location":"M250/Theory/02_classes_objects/","text":"Classes, Objects, and Attributes Objects A general description of an object and its relationship with its class. Attributes Attributes and instance variables It is common that there is one-to-one relationship between an attribute and some instance variable, but it is not neccessarily the case. Example A person has a first name and last name. These are attributes we could implement using two instance variables: fName and lname . But a person also has another attribute: full name, which we would not implement in this case, instead we would write a getter method getFullName that would return both the fName and lName instance variables. That way, if we wish to change how a person's full name is represented, we would only need to change the one method. Attributes and state Reference: U01, SAQ 2 Attributes describe the kind of information that can be determined about an object. The state of an object is the particular data held by all the attributes at a given time. Keywords Attribute Some property or characteristic of an object that can be accessed using a getter method. Attributes are generally implemented by instance variables. An object's attributes are defined by its class. Class A class is a blueprint for the creation of objects. They ensures that all its instances have the same instance variables and behave in response to messages in an identical manner. Instance variable A variable whose identifier and type is common to all the instances of a class, but whose value is specific to each instance. Each instance variable either contains a reference to an object or contains a value of some primitive type. State The values of the attributes of an object constitute its state. The state of an object can vary over time as the values of its attributes change.","title":"Classes, Objects, and Attributes"},{"location":"M250/Theory/02_classes_objects/#classes-objects-and-attributes","text":"","title":"Classes, Objects, and Attributes"},{"location":"M250/Theory/02_classes_objects/#objects","text":"A general description of an object and its relationship with its class.","title":"Objects"},{"location":"M250/Theory/02_classes_objects/#attributes","text":"","title":"Attributes"},{"location":"M250/Theory/02_classes_objects/#attributes-and-instance-variables","text":"It is common that there is one-to-one relationship between an attribute and some instance variable, but it is not neccessarily the case. Example A person has a first name and last name. These are attributes we could implement using two instance variables: fName and lname . But a person also has another attribute: full name, which we would not implement in this case, instead we would write a getter method getFullName that would return both the fName and lName instance variables. That way, if we wish to change how a person's full name is represented, we would only need to change the one method.","title":"Attributes and instance variables"},{"location":"M250/Theory/02_classes_objects/#attributes-and-state","text":"Reference: U01, SAQ 2 Attributes describe the kind of information that can be determined about an object. The state of an object is the particular data held by all the attributes at a given time.","title":"Attributes and state"},{"location":"M250/Theory/02_classes_objects/#keywords","text":"Attribute Some property or characteristic of an object that can be accessed using a getter method. Attributes are generally implemented by instance variables. An object's attributes are defined by its class. Class A class is a blueprint for the creation of objects. They ensures that all its instances have the same instance variables and behave in response to messages in an identical manner. Instance variable A variable whose identifier and type is common to all the instances of a class, but whose value is specific to each instance. Each instance variable either contains a reference to an object or contains a value of some primitive type. State The values of the attributes of an object constitute its state. The state of an object can vary over time as the values of its attributes change.","title":"Keywords"},{"location":"M250/Theory/03_messages/","text":"","title":"03 messages"}]}